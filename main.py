import os
import sys
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
from aiogram.types import InputMediaPhoto
import re
import random
import asyncio
from aiosend import CryptoPay, MAINNET
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, Message
from aiogram.utils.keyboard import  InlineKeyboardBuilder
from aiosend import CryptoPay
from aiogram import F
import asyncio
import logging
import aiohttp
import sys
import asyncio
from contextlib import suppress
import logging
import sys
import os
from os import getenv
import sqlite3
import random
import re
import datetime
import time
from aiogram.exceptions import TelegramBadRequest
from typing import Any
from aiogram import types
from aiogram import Router
from aiogram import Bot, Dispatcher, F   
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.types import PreCheckoutQuery, LabeledPrice
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton , InlineKeyboardMarkup , InlineKeyboardButton , CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from datetime import datetime, timedelta
from aiogram.types import ChatPermissions
from aiogram.enums import ChatType
from aiogram.methods.send_gift import SendGift
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application



# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø) =====
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
SEND_API_KEY = os.getenv("SEND_API_KEY")  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "@LunaBetChannel")
ADMIN_ID = int(os.getenv("ADMIN_ID", 767154085))  # –í–∞—à ID –≤ Telegram
logger = logging.getLogger(__name__)
connect = sqlite3.connect('lunab3t.db')
cursor = connect.cursor()

# ===== –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ö–õ–Æ–ß–ï–í–´–• –ü–ï–†–ï–ú–ï–ù–ù–´–• =====
if not BOT_TOKEN:
    logging.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

if not SEND_API_KEY:
    logging.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω SEND_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

WEB_SERVER_HOST = "0.0.0.0"  
WEB_SERVER_PORT = int(os.getenv("PORT", 8080)) 
WEBHOOK_PATH = "/webhook"
BASE_WEBHOOK_URL = os.getenv("WEBHOOK_URL")  

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
send_client = CryptoPay(token=SEND_API_KEY)




# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        if BASE_WEBHOOK_URL:
            await bot.set_webhook(
                f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}",
                drop_pending_updates=True
            )
        await bot.send_message(ADMIN_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    try:
        if BASE_WEBHOOK_URL:
            await bot.delete_webhook()
        await bot.send_message(ADMIN_ID, "‚ö†Ô∏è –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        await bot.session.close()
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: {e}")

async def keep_alive():
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã Render –Ω–µ —É—Å—ã–ø–ª—è–ª –±–æ—Ç–∞"""
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{BASE_WEBHOOK_URL or 'http://localhost'}/ping") as resp:
                    logging.info(f"üîÅ Keep-alive ping: {resp.status}")
        except Exception as e:
            logging.error(f"üö® Keep-alive error: {e}")
        await asyncio.sleep(300)

async def ping_handler(request: web.Request):
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    return web.Response(text="‚úÖ Bot is alive")

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    app = web.Application()
    app.router.add_get("/ping", ping_handler)
    
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    return app




LOGS_CHANNEL_ID = -1002644395732
SUPPORT_ADMIN_ID = 767154085 
class SupportStates(StatesGroup):
    waiting_for_message = State()




cursor.execute("""
CREATE TABLE IF NOT EXISTS users(
    user_id INTEGER,
    username TEXT,
    plays INTEGER,
    wins INTEGER,
    loses INTEGER,
    reg_date TEXT
)
""")
connect.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS promocodes(
    name TEXT PRIMARY KEY,
    max_uses INTEGER,
    used INTEGER DEFAULT 0
)
""")
connect.commit()




menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíº –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ùó –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ], 
    resize_keyboard=True
)



# ========= BOT =========


@dp.message(Command('start'))
async def start_cmd(message: types.Message, state: FSMContext = None):
    username = message.from_user.username
    user_id = message.from_user.id
    name = message.from_user.full_name
    fullname = f'<a href="t.me/{username}">{name}</a>'
    moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime("%d.%m.%Y %H:%M")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
    try:
        member = await bot.get_chat_member('@LunaBetChannel', user_id)
        if member.status == 'left':
            await message.answer(
                f"<b>üëã {fullname}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @LunaBetChannel\n</b>"
                f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ /start.",
                parse_mode='HTML'
            )
            return
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode='html')
        return

    # === –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ===
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone()
    if state:
        await state.clear()

    if not exists:
        cursor.execute(
            "INSERT INTO users (user_id, username, plays, wins, loses, reg_date) VALUES (?, ?, 0, 0, 0, ?)",
            (user_id, username, moscow_time)
        )
        connect.commit()

    photo_url = "https://i.postimg.cc/3rDnXD22/image.jpg"
    cursor.execute("SELECT reg_date FROM users WHERE user_id = ?", (user_id,))
    reg_date = cursor.fetchone()[0]

    this = f'<a href="https://t.me/LunaBetChannel/3">—ç—Ç–æ</a>'
    await message.answer_photo(
        photo=photo_url,
        caption=f"""
<b>‚ö° {fullname}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <u>Luna Bet</u></b>

<blockquote>¬´–ö–∞–∂–¥–æ–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Å—Ç–∞–≤–∫–∞. –í–æ–ø—Ä–æ—Å –≤ —Ç–æ–º, –∏–≥—Ä–∞–µ—à—å —Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∂–¥—ë—à—å.¬ª ‚Äî –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏</blockquote>

<i>–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ—á—Ç–∏ <b>{this}</b></i>
""",
        parse_mode="HTML",
        reply_markup=menu
    )



from aiogram.types import InputMediaPhoto
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    cursor.execute("SELECT user_id, username, plays, wins, loses FROM users ORDER BY plays DESC LIMIT 10")
    top_users = cursor.fetchall()
    chat_id = message.chat.id
    await bot.send_message(chat_id, "üìä")
    await asyncio.sleep(0.3)
    if not top_users:
        await message.answer("üìâ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö.")
        return

        

    text = "<b>[üìä] –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ Luna Bet:</b>\n\n"
    for i, (user_id, username, plays, wins, loses) in enumerate(top_users, start=1):
        try:
            member = await bot.get_chat(user_id)
            full_name = member.full_name
        except:
            full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        if username:
            user_link = f'<a href="https://t.me/{username}">{full_name}</a>'
        else:
            user_link = f'<a href="tg://user?id={user_id}">{full_name}</a>'

        text += f"<i>‚Äî {i}. {user_link}: –∏–≥—Ä—ã ‚Äî {plays} | –ø–æ–±–µ–¥—ã ‚Äî {wins}\n</i>"

    new_photo_url = "https://i.postimg.cc/Vk9dz2G3/image.jpg" 
    media = InputMediaPhoto(media=new_photo_url, caption=text, parse_mode="HTML")

    try:
        
        await message.answer_photo(photo=new_photo_url, caption=text, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_media: {e}")

    

from aiogram.utils.keyboard import InlineKeyboardBuilder

@dp.message(lambda m: m.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    name = message.from_user.full_name
    chat_id = message.chat.id
    cursor.execute("SELECT plays, wins, loses FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    cursor.execute("SELECT reg_date FROM users WHERE user_id = ?", (user_id,))
    reg_date = cursor.fetchone()[0]
    await bot.send_message(chat_id, "üíº")
    await asyncio.sleep(0.3)


    money = InlineKeyboardBuilder()
    money.button(text="üí∏ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url="https://t.me/send?start=IVrfxN9IrHq8")
    money.adjust(1)

    if row:
        plays, wins, loses = row
    else:
        plays = wins = loses = 0

    if username:
        fullname = f'<a href="https://t.me/{username}">{name}</a>'
    else:
        fullname = name

    text = (
        f"""<b>[üíº] –í–∞—à –ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:</b>

<i>‚úèÔ∏è –ù–∏–∫: {fullname}
üóìÔ∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date} (–ú–°–ö)

üïπ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {plays}</i>    
   ‚Ü≥ üèÜ <i>–ü–æ–±–µ–¥: {wins}</i>
   ‚Ü≥ üí• <i>–ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: {loses}</i>""")

    new_photo_url = "https://i.postimg.cc/Nf3Hs6gr/image.jpg"  

    media = InputMediaPhoto(media=new_photo_url, caption=text, parse_mode="HTML")

    try:
        await message.answer_photo(photo=new_photo_url, caption=text, parse_mode="HTML", reply_markup=money.as_markup())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
        print(f"Error editing media: {e}")




@dp.message(F.text == '–∏–Ω–≤–æ–π—Å')
async def main_hand(message: types.Message):
    cp = CryptoPay("417594:AAei8HxkjFN6D6GWKeB9f46mK6Q3dghVDAH", MAINNET)

    invoice = await cp.create_invoice(
        amount=0.8,  
        asset="USDT",   
        description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
    )

    await message.answer(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {invoice.bot_invoice_url}")






@dp.channel_post()
async def check_payments(post: types.Message):
    playing = random.randint(1, 2)
    PHOTO_WIN_URL = 'https://i.postimg.cc/0N7Ld6Rf/image.jpg'
    PHOTO_LOSE_URL = 'https://i.postimg.cc/T1NSYggR/image.jpg'

    play = InlineKeyboardBuilder()
    play.button(text="üïπÔ∏è –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url='t.me/send?start=IVrfxN9IrHq8')
    play_markup = play.as_markup()


    if post.chat.id == LOGS_CHANNEL_ID:
        logging.info(f"Post from target channel {LOGS_CHANNEL_ID}. Text: {post.text}")

        text_with_formatting = post.html_text or ""
        raw_lines = (post.text or "").splitlines()
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        for line in raw_lines:
            if "üí¨" in line:
                comment = line.replace("üí¨", "").strip()
                break

        match = re.search(
            r'<a href="tg://user\?id=(\d+)">\s*(.*?)\s*</a>'
            r'\s*(?:<a[^>]*?>)?–æ—Ç–ø—Ä–∞–≤–∏–ª\(–∞\)(?:</a>)?'
            r'.*?'
            r'(?:<b><tg-emoji[^>]*?>.*?<\/tg-emoji>)?'
            r'(?:<b>)?([\d.,]+)\sUSDT(?:</b>)?',
            text_with_formatting,
            re.IGNORECASE
        )

        if match:
            try:
                user_id = match.group(1)
                displayed_nick_raw = match.group(2)
                amount = float(match.group(3).replace(',', '.'))

                displayed_nick_clean = re.sub(r'<[^>]*?>', '', displayed_nick_raw).strip()
                user_profile_link = f'<a href="tg://user?id={user_id}">{displayed_nick_clean}</a>'

                cp = CryptoPay("417594:AAei8HxkjFN6D6GWKeB9f46mK6Q3dghVDAH", MAINNET)

                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞
                if comment in ['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞']:
                    multiplier = 1.8
                elif comment in ['–±–æ–ª—å—à–µ', '–º–µ–Ω—å—à–µ']:
                    multiplier = 1.5
                elif comment in ['—á–µ—Ç', '–Ω–µ—á–µ—Ç']:
                    multiplier = 1.5
                else:
                    multiplier = 1

                win_amount = round(amount * multiplier, 2)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                cursor.execute("UPDATE users SET plays = plays + 1 WHERE user_id = ?", (user_id,))
                connect.commit()

                
                await bot.send_message(chat_id=int(-1002744283282), text=f"""<b>üí∏ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>

<blockquote>| –ò–≥—Ä–æ–∫: {user_profile_link}</blockquote>

<blockquote>| –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount}$</blockquote>

<blockquote>| –ò—Å—Ö–æ–¥ —Å—Ç–∞–≤–∫–∏: {comment}</blockquote>
                    """, parse_mode='html')

                if playing == 1:
                    # –ü–æ–±–µ–¥–∞
                    check = await cp.create_check(
                        amount=win_amount,
                        asset="USDT",
                        pin_to_user_id=int(user_id)
                    )
                    cursor.execute("UPDATE users SET wins = wins + 1 WHERE user_id = ?", (user_id,))
                    await bot.send_photo(
                        chat_id=int(-1002744283282),
                        photo=PHOTO_WIN_URL,
                        caption=f"""
[‚ö°Ô∏è] <b>–ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´{playing}¬ª.</b>

<blockquote>–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: <b>{win_amount} $</b>
–í–∞—à –≤—ã–∏–≥—Ä—ã—à –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üéâ</blockquote>

<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å, –∂–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö</i>
                        """,
                        parse_mode="HTML", reply_markup=play_markup
                    )
                    builder = InlineKeyboardBuilder()
                    builder.button(text="üí∏ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑", url=check.bot_check_url)
                    reply_markup = builder.as_markup()

                    await bot.send_photo(
                        chat_id=user_id,
                        photo=PHOTO_WIN_URL,
                        caption=f"""<b>[‚ö°Ô∏è] –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üí•</b>

<i>‚ö° –í–∞—à –≤—ã–∏–≥—Ä—ã—à –Ω–∏–∂–µ:</i>""",
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )

                else:
                    # –ü—Ä–æ–∏–≥—Ä—ã—à
                    cursor.execute("UPDATE users SET loses = loses + 1 WHERE user_id = ?", (user_id,))


                    await bot.send_photo(
                        chat_id=int(-1002744283282),
                        photo=PHOTO_LOSE_URL,
                        caption=f"""
<b>‚ö°Ô∏è –ü—Ä–æ–∏–≥—Ä—ã—à ‚Äî —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü, –∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —à–∞–Ω—Å–∞. –í–∞–º –≤—ã–ø–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´{playing}¬ª</b>

<blockquote>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, –¥–∞–∂–µ –ª—É—á—à–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞—é—Ç.
–ö–∞–∂–¥–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –±–æ–ª—å—à–æ–π –ø–æ–±–µ–¥–µ, –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç –∂–¥–∞—Ç—å.</blockquote>

<i>–í–ø–µ—Ä—ë–¥, –∫ –Ω–æ–≤—ã–º –≤–µ—Ä—à–∏–Ω–∞–º! –í–∞—à–∞ –ø–æ–±–µ–¥–∞ —É–∂–µ –±–ª–∏–∑–∫–∞! üí•</i>
                        """,
                        parse_mode="HTML", reply_markup=play_markup
                    )

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)





cp = CryptoPay("417594:AAei8HxkjFN6D6GWKeB9f46mK6Q3dghVDAH", MAINNET)


@dp.message(Command("—á–µ–∫–∏"))
async def list_checks(message: types.Message):
    try:
        checks = await cp.get_checks(count=100)  # –ø–æ–ª—É—á–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫–æ–≤

        if not checks:
            await message.answer("‚ùå –ß–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        text = "<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —á–µ–∫–æ–≤:</b>\n\n"
        for check in checks:
            text += (
                f"üÜî <code>{check.check_id}</code>\n"
                f"üìå –°—Ç–∞—Ç—É—Å: <b>{check.status}</b>\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {check.activated_at or '‚Äî'}\n"
                f"üîó <a href='{check.bot_check_url}'>–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫</a>\n\n"
            )

        await message.answer(text, parse_mode='html')

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤:\n<code>{e}</code>")


@dp.message(F.text == "‚ùó –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_entry(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="support_continue"),
                InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_start")
            ]
        ]
    )
    chat_id = message.chat.id
    await bot.send_message(chat_id, "‚ùó")
    await asyncio.sleep(0.3)

    photo_url = "https://i.postimg.cc/76JMnpJq/image.jpg"

    await message.answer_photo(
        photo=photo_url,
        caption=f"""<b>[‚ùó] –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Luna Bet</b>
<i>–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª</b> –Ω–∏–∂–µ.

‚ö° –ú—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞–º –ø–æ–º–æ—á—å!</i>""",
        parse_mode="HTML",
        reply_markup=keyboard 
    )


@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery):
    await start_cmd(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "support_continue")
async def support_continue(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_message)
    await callback.message.answer(
    f"""<b>‚ö° –í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –¥–∏–∞–ª–æ–≥</b>
<i>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —Å —á–µ–º –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º. –û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –∏–∑–±–µ–≥–∞—è –º–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –ß–µ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É ‚Äî —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å. –ù–µ —Å–ø–∞–º—å—Ç–µ, –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.
–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –°–ø–∞—Å–∏–±–æ!</i>""",
    parse_mode="HTML"
)

    await callback.answer()

@dp.message(SupportStates.waiting_for_message)
async def receive_support_message(message: types.Message, state: FSMContext):
    user = message.from_user
    username = f"@{user.username}" if user.username else f"{user.full_name}"
    user_link = f'<a href="tg://user?id={user.id}">{username}</a>'

    await bot.send_message(
        SUPPORT_ADMIN_ID,
        f"üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link}\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}",
        parse_mode="HTML"
    )

    await message.answer("<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ! ü©∑</b>", parse_mode='html')
    await state.clear()


@dp.message(Command("test"))
async def test(message: types.Message):
    await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")




# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = await setup_webhook()
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(
            runner,
            host=WEB_SERVER_HOST,
            port=WEB_SERVER_PORT,
            reuse_port=True
        )
        
        await site.start()
        logging.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        await on_startup()
        asyncio.create_task(keep_alive())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(3600)
            
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()
        if 'runner' in locals():
            await runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")
        sys.exit(1)

